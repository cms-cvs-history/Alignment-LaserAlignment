
process laserAlignment = {
    
    #=========================================================================================
    # MessageLogger
    service = MessageLogger {
	// Specify two output Log-files
	untracked vstring destinations = {
	    "cout", 
	    "cerr"
	}
	
	// Define their policy
	untracked PSet cout = { untracked string threshold = "INFO"  }
	untracked PSet cerr = { untracked string threshold = "ERROR" }
	untracked vstring debugModules = {  "LaserAlignment"  } 
    }  
    # End MessageLogger
    #=========================================================================================
    
    #=========================================================================================
    # Modules
    # >> GENERAL CONFIGURATION <<
    # -- Geometry
    include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
    
    # -- Tracker Geometry
    include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
        
    # -- Magnetic Field
#    include "MagneticField/Engine/data/uniformMagneticField.cfi"
#    replace UniformMagneticFieldESProducer.ZFieldInTesla = 0
   
    # -- Tracker RecoGeometry
#    include "RecoTracker/GeometryESProducer/data/TrackerRecoGeometryESProducer.cfi"
 
   # -- DB STUFF
   # pedestals service
#   es_source siStripPedestals = poolDBESSource from "CalibTracker/Configuration/data/Common/PoolDBESSource.cfi"
#   replace siStripPedestals.connect="frontier://Frontier/CMS_COND_STRIP"
#   replace siStripPedestals.toGet = {{ string record = "SiStripPedestalsRcd"
#                                       string tag = "SiStripPedestals_TIF_20X" }}

   # alignment output
   include "CondCore/DBCommon/data/CondDBCommon.cfi"
   replace CondDBCommon.connect = "sqlite_file:Alignments.db"
   ## replace CondDBCommon.catalog = "file:condbcatalog.xml"


   // Database output service
   service = PoolDBOutputService {
     using CondDBCommon
     VPSet toPut = {
       { string record = "TrackerAlignmentRcd"
         string tag = "Alignments" },
       { string record = "TrackerAlignmentErrorRcd"
         string tag = "AlignmentErrors" }
     }
   } 
    
    # -- Produce SiStripFecCabling and SiStripDetCabling out of SiStripFedCabling
#    es_module sistripconn = SiStripConnectivity {}
    
    # >> TRACKS FINDERS <<
#    include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilder.cfi"
#    include "RecoLocalTracker/SiPixelRecHits/data/PixelCPEParmError.cfi"
#    include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
#    include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"
#    include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"
    

    # Sources
    source = PoolSource {
       untracked vstring fileNames = { "file:/afs/cern.ch/user/o/olzem/scratch0/las-1200-alcareco.root" }
    }
    # End Sources  

    # End Modules
    #=========================================================================================


    # LaserAlignment module
    include "Alignment/LaserAlignment/data/LaserAlignment.cfi"
    replace LaserAlignment.NumberOfEventsPerLaserIntensity = 1
    replace LaserAlignment.NumberOfEventsForAllIntensities = 1
    replace LaserAlignment.DigiProducersList = {
      { string DigiProducer = "laserAlignmentT0Producer"
	string DigiLabel    = "VirginRaw" }
    }
    replace LaserAlignment.saveToDbase = false
    replace LaserAlignment.saveHistograms = false
    replace LaserAlignment.SubtractPedestals = false

    untracked PSet maxEvents = { untracked int32 input = -1 } ####

    module dump = EventContentAnalyzer {}	
    sequence alignment = { LaserAlignment }#, dump }

    path laser = { alignment }

    # End Schedule
    #=========================================================================================
}

