process LaserAlignment = {
    service = MessageLogger
    {
	untracked vstring destinations = {"debug.log", "info.log"}
	untracked vstring debugModules = {"*"}
	untracked PSet debug.log = { untracked string threshold = "DEBUG"}
	untracked PSet info.log = { untracked string threshold = "INFO" }
	
    }


    source = PoolSource 
    { 
	untracked vstring fileNames = { 
	    "file:LaserEvents.SIM-DIGI.root"
	}
	untracked PSet maxEvents = {untracked int32 input = -1}
	untracked uint32 debugVerbosity = 10
	untracked bool   debugFlag     = true
    }
    
    module o1 = PoolOutputModule 
    { 
	untracked string fileName = "LaserEvents.SIM-DIGI-RECO.root" 
	#untracked vstring outputCommands = 
	#{ 
	#    "drop *",
	#    "keep *_*_*_LaserAlignment"
	#}
    }

    #Geometry
    include "Geometry/TrackerRecoData/data/trackerRecoGeometryXML.cfi"
    
    # Interface to ideal geometry producer (needed for Tracker Numbering)
    include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"
    
    #Magnetic Field
    #
    include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"
        
    es_module = TrackerDigiGeometryESModule {}

    # LaserAlignment module
    include "Alignment/LaserAlignment/data/LaserAlignment.cfi"
    replace LaserAlignment.NumberOfEventsPerLaserIntensity = 1
    replace LaserAlignment.NumberOfEventsForAllIntensities = 1
    
    # module to calculate the expected alignment corrections; configuration has to matched the used
    # misalignment scenario to get the correct corrections
    #include "Alignment/LaserAlignment/data/ExpectedCorrectionsOnlyRotations.cfi" 
    
    # clusterization of the laser beams
    include "Alignment/LaserAlignment/data/LaserClusterizer.cfi"

    # clusterization of pixels (needed for track reco by MeasurementTracker.cc)
    include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"
    
    # RecHits
    include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"
    
    include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"
    
    include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"
    
    module ReadLocalMeasurement =  ReadLaserRecHit
    {
    	untracked int32 VerbosityLevel = 1
        string RecHitProducer = "siStripMatchedRecHits"
    }
    
    # seed finding
    include "Alignment/LaserAlignment/data/LaserSeedGenerator.cff"
    
    # KFUpdatoerESProducer
    include "TrackingTools/KalmanUpdators/data/KFUpdatorESProducer.cfi"
    
    # Chi2MeasurementEstimatorESProducer
    include "TrackingTools/KalmanUpdators/data/Chi2MeasurementEstimatorESProducer.cfi"
    
    # KFTrajectoryFitterESProducer
    include "TrackingTools/TrackFitters/data/KFTrajectoryFitterESProducer.cfi"
    
    # KFTrajectorySmootherESProducer
    include "TrackingTools/TrackFitters/data/KFTrajectorySmootherESProducer.cfi"
    
    # KFFittingSmootherESProducer
    include "TrackingTools/TrackFitters/data/KFFittingSmootherESProducer.cfi"
    
    # PropagatorWithMaterialESProducer
    include "TrackingTools/MaterialEffects/data/MaterialPropagator.cfi"
    
    # PropagatorWithMaterialESProducer
    include "TrackingTools/MaterialEffects/data/OppositeMaterialPropagator.cfi"
    
    # MeasurementTracker
    include "RecoTracker/MeasurementDet/data/MeasurementTrackerESProducer.cfi"

    # TrackerTrajectoryBuilders
    include "RecoTracker/CkfPattern/data/CkfTrajectoryBuilderESProducer.cfi"
    replace CkfTrajectoryBuilder.ptCut = 0.0
    replace CkfTrajectoryBuilder.maxLostHit = 2
    include "RecoTracker/CkfPattern/data/GroupedCkfTrajectoryBuilderESProducer.cfi"
    # Track Candidates
    include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cfi"
    replace ckfTrackCandidates.SeedProducer = "LaserSeedFinder"
    
    include "Alignment/LaserAlignment/data/RecoAnalyzer.cfi"
    
    # Track Producer
    include "RecoTracker/TrackProducer/data/CTFFinalFitWithMaterial.cfi"

    # define sequences
    sequence LaserReco = { LaserAlignment }
    sequence Clusters = { siStripClusters, siPixelClusters }
    sequence RecHits = { siStripMatchedRecHits }
    sequence TrackCandidates = { LaserSeedFinder, ckfTrackCandidates }
    sequence FinalTracks = { ctfWithMaterialTracks }
    sequence RecoInfo = { RecoAnalyzer, ReadLocalMeasurement}
    #sequence Calculator = { ExpectedCorrectionsCalculator }

    #provide a scheduler path
    path p1 = { LaserReco, Clusters, RecHits, TrackCandidates, FinalTracks, RecoInfo } 
    endpath output = { o1 }
}

